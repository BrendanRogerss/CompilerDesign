NPROG <program> ::= CD <id> <globals> <funcs> <mainbody>
NGLOB <globals> ::= <consts> <types> <arrays>
Special <consts> ::= constants <initlist> | ε
NILIST <initlist> ::= <init> , <initlist>
Special <initlist> ::= <init>
NINIT <init> ::= <id> is <expr>
Special <types> ::= types <typelist> | ε
Special <arrays> ::= arrays <arrdecls>
Special <arrays> ::= ε
NFUNCS <funcs> ::= <func> <funcs>
Special <funcs> ::= ε
NMAIN <mainbody> ::= main <slist> begin <stats> end CD <id>
NSDLST <slist> ::= <sdecl> , <slist>
Special <slist> ::= <sdecl>
NTYPEL <typelist> ::= <type> <typelist>
Special <typelist> ::= <type>
NRTYPE <type> ::= <structid> is <fields> end
NATYPE <type> ::= <typeid> is array [ <expr> ] of <structid>
NFLIST <fields> ::= <sdecl> , <fields>
Special <fields> ::= <sdecl>
NSDECL <sdecl> ::= <id> : <stype>
NALIST <arrdecls> ::= <arrdecl> , <arrdecls>
Special <arrdecls> ::= <arrdecl>
NARRD <arrdecl> ::= <id> : <typeid>
NFUND <func> ::= func <id> ( <plist> ) : <rtype> <funcbody>
Special <rtype> ::= <stype> | void
Special <plist> ::= <params> | ε
NPLIST <params> ::= <param> , <params>
Special <params> ::= <param>
NSIMP <param> ::= <sdecl>
NARRP <param> ::= <arrdecl>
NARRC <param> ::= const <arrdecl>
Special <funcbody> ::= <locals> begin <stats> end
Special <locals> ::= <dlist> | ε
NDLIST <dlist> ::= <decl> , <dlist>
Special <dlist> ::= <decl>
Special <decl> ::= <sdecl> | <arrdecl>
Special <stype> ::= integer | real | boolean
NSTATS <stats> ::= <stat> ; <stats> | <strstat> <stats>
Special <stats> ::= <stat>; | <strstat>
Special <strstat> ::= <forstat> | <ifstat>
Special <stat> ::= <reptstat> | <asgnstat> | <iostat>
Special <stat> ::= <callstat> | <returnstat>
NFORL <forstat> ::= for ( <asgnlist> ; <bool> ) <stats> end
NREPT <repstat> ::= repeat ( <asgnlist> ) <stats> until <bool>
Special <asgnlist> ::= <alist> | ε
NASGNS <alist> ::= <asgnstat> , <alist>
Special <alist> ::= <asgnstat>
NIFTH <ifstat> ::= if ( <bool> ) <stats> end
NIFTE <ifstat> ::= if ( <bool> ) <stats> else <stats> end
NASGN <asgnstat> ::= <var> << <bool>
NINPUT <iostat> ::= In >> <vlist>
NOUTP <iostat> ::= Out << <prlist>
NOUTL <iostat> ::= Out << Line
NOUTL <iostat> ::= Out << <prlist> << Line
NCALL <callstat> ::= <id> ( <elist> ) | <id> ( )
NRETN <returnstat> ::= return | return <expr>
NVLIST <vlist> ::= <var> , <vlist>
Special <vlist> ::= <var>
NSIMV <var> ::= <id>
NARRV <var> ::= <id>[<expr>] . <id>
NAELT <var> ::= <id>[<expr>]
NEXPL <elist> ::= <bool> , <elist>
Special <elist> ::= <bool>
NBOOL <bool> ::= <bool><logop> <rel>
Special <bool> ::= <rel>
NNOT <rel> ::= not <expr> <relop> <expr>
Special <rel> ::= <expr> <relop><expr>
Special <rel> ::= <expr>
Various <logop> ::= and | or | xor
 NAND, NOR, NXOR
Various <relop> ::= == | != | > | <= | < | >=
 NEQL, NNEQ, NGRT, NLEQ, NLSS, NGEQ
NADD <expr> ::= <expr> + <term>
NSUB <expr> ::= <expr> - <term>
Special <expr> ::= <term>
NMUL <term> ::= <term> * <fact>
NDIV <term> ::= <term> / <fact>
NMOD <term> ::= <term> % <fact>
Special <term> ::= <fact>
NPOW <fact> ::= <fact> ^ <exponent>
Special <fact> ::= <exponent>
Special <exponent> ::= <var>
NILIT <exponent> ::= <intlit>
NFLIT <exponent> ::= <reallit>
Special <exponent> ::= <fncall>
NTRUE <exponent> ::= true
NFALS <exponent> ::= false
Special <exponent> ::= ( <bool> )
NFCALL <fncall> ::= <id> ( <elist> ) | <id> ( )
NPRLST <prlist> ::= <printitem> , <prlist>
Special <prlist> ::= <printitem>
Special <printitem> ::= <expr>
NSTRG <printitem> ::= <string>
<id>, <structid>, <typeid> are all simply identifier tokens returned by the scanner.
<intlit>, <reallit> and <string> are also special tokens returned by the scanner.